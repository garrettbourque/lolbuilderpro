[{"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/index.js":"1","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/App.js":"2","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/reportWebVitals.js":"3","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/NavBar.js":"4","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/CreateLogin.js":"5","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Login.js":"6","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Home.js":"7","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Search.js":"8","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Play.js":"9","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/SelectGameMode.js":"10","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Battle.js":"11","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Item.js":"12"},{"size":538,"mtime":1624462669529,"results":"13","hashOfConfig":"14"},{"size":3876,"mtime":1624634414080,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1624307606850,"results":"16","hashOfConfig":"14"},{"size":1042,"mtime":1624462638479,"results":"17","hashOfConfig":"14"},{"size":2491,"mtime":1624547839380,"results":"18","hashOfConfig":"14"},{"size":5002,"mtime":1624634414090,"results":"19","hashOfConfig":"14"},{"size":5544,"mtime":1624637319580,"results":"20","hashOfConfig":"14"},{"size":541,"mtime":1624634414090,"results":"21","hashOfConfig":"14"},{"size":7342,"mtime":1624643328050,"results":"22","hashOfConfig":"14"},{"size":2848,"mtime":1624634414090,"results":"23","hashOfConfig":"14"},{"size":9855,"mtime":1624634414080,"results":"24","hashOfConfig":"14"},{"size":158,"mtime":1624643293820,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1a0hngr",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/index.js",[],["59","60"],"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/App.js",["61"],"import './App.css';\nimport { React, useState } from 'react'\nimport { Route, Switch, useHistory } from 'react-router-dom'\n\n//import components\nimport NavBar from './NavBar'\nimport Login from './Login'\nimport CreateLogin from './CreateLogin'\nimport Home from './Home'\nimport SelectGameMode from './SelectGameMode'\n\nimport Play from './Play'\n\nimport Battle from './Battle'\n\n\nfunction App() {\n  const [loginValidated, setLoginValidated] = useState(false)\n  const [selectedMap, setSelectedMap] = useState(\"\")\n  const [selectedChampion, setSelectedChampion] = useState([])\n  const [selectedGameMode, setSelectedGameMode] = useState(\"\")\n  const [highlightGameMode1v1, setHighlightGameMode1v1] = useState(\"false\")\n  const [highlightGameMode2v2, setHighlightGameMode2v2] = useState(\"false\")\n  const [highlightMapSR, setHighlightMapSR] = useState(\"false\")\n  const [highlightMapHA, setHighlightMapHA] = useState(\"false\")\n  const [currentUser, setCurrentUser] = useState({\n    username: \"\",\n    password: \"\"\n  })\n  const history = useHistory()\n\n  if (loginValidated===false) {\n    history.push('/login')\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/login\">\n            <Login \n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              loginValidated={loginValidated}\n              setLoginValidated={setLoginValidated}\n            />\n          </Route>\n          <Route exact path=\"/createlogin\">\n            <CreateLogin />\n          </Route>\n        </Switch>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/login\">\n            <Login \n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              loginValidated={loginValidated}\n              setLoginValidated={setLoginValidated}\n            />\n          </Route>\n          <Route exact path =\"/createlogin\">\n            <CreateLogin />\n          </Route>\n          <Route exact path =\"/selectgamemode\">\n            <SelectGameMode\n              highlightGameMode1v1={highlightGameMode1v1}\n              setHighlightGameMode1v1={setHighlightGameMode1v1}\n              highlightGameMode2v2={highlightGameMode2v2}\n              setHighlightGameMode2v2={setHighlightGameMode2v2}\n              highlightMapSR={highlightMapSR}\n              setHighlightMapSR={setHighlightMapSR}\n              highlightMapHA={highlightMapHA}\n              setHighlightMapHA={setHighlightMapHA}\n              selectedMap={selectedMap}\n              setSelectedMap={setSelectedMap}\n              selectedGameMode={selectedGameMode}\n              setSelectedGameMode={setSelectedGameMode}\n            />\n          </Route>\n          <Route exact path =\"/battle\">\n            <Battle \n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              selectedMap={selectedMap}\n              selectedChampion={selectedChampion}\n              selectedGameMode={selectedGameMode}\n            />\n          </Route>\n          <Route exact path=\"/\">\n            <Home \n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              selectedMap={selectedMap}\n              setSelectedMap={setSelectedMap}\n              selectedChampion={selectedChampion}\n              setSelectedChampion={setSelectedChampion}\n              selectedGameMode={selectedGameMode}\n              setSelectedGameMode={setSelectedGameMode}\n            />\n          </Route>\n          <Route exact path=\"/play/:id\">\n            <Play \n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              selectedChampion={selectedChampion}\n              setSelectedChampion={setSelectedChampion}\n\n            />\n          </Route>\n        </Switch>\n      </div>\n    )\n  }\n  }\n\nexport default App;","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/reportWebVitals.js",[],"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/NavBar.js",[],"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/CreateLogin.js",["62"],"import { react, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n  }));\n\nlet CreateLogin = () => {\n    const classes = useStyles();   \n    const [newUser, setNewUser] = useState({\n        username: \"\",\n        password: \"\"\n    })\n    const history = useHistory()\n\n\n    let handleChange = (e) => {\n        setNewUser({\n            ...newUser,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    let handleSubmit = (e) => {\n        e.preventDefault()\n        if(newUser.username === \"\" || newUser.password === \"\"){\n            alert('Please input a valid username or password')\n            setNewUser({\n                username: \"\",\n                password: \"\"\n            })\n        } else {\n            fetch('http://localhost:3000/users', {\n            method: 'POST',\n            headers: {'Content-type':'Application/json'}, \n            body: JSON.stringify(newUser)\n            })\n            .then(res => res.json())\n            .then(data => {\n                history.push('/login')\n            })\n        }\n        \n    }\n\n    return (\n        <form id=\"createLoginForm\" className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <div className=\"create-login\">\n                <div className=\"create-login-card\">\n                    <TextField\n                        id=\"filled-error\"\n                        label=\"username\"\n                        name=\"username\"\n                        //helperText=\"Incorrect entry. Please create a new login\" \n                        variant=\"filled\"\n                        onChange={handleChange}\n                    />\n                    <TextField\n                        id=\"filled-error-helper-text\"\n                        label=\"password\"\n                        name=\"password\"\n                        //helperText=\"Incorrect entry. Please try again.\" \n                        variant=\"outlined\"\n                        onChange={handleChange}\n                    />\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Submit</Button>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default CreateLogin","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Login.js",["63","64"],"import { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n  }));\n\nlet Login = ({ currentUser, setCurrentUser, loginValidated, setLoginValidated }) => {\n    const classes = useStyles();   \n    const history = useHistory()\n    const [usernameError, setUsernameError] = useState(false)\n    const [passwordError, setPasswordError] = useState(false)\n    \n    let handleCreateLogin = () => {\n        history.push('/createlogin')\n    }\n\n    let handleChange = (e) => {\n        setCurrentUser({\n            ...currentUser,\n            [e.target.name] : e.target.value\n            \n        })\n    }\n\n    let handleSubmit = (e) => {\n        e.preventDefault()\n        fetch('http://localhost:3000/users')\n        .then(res => res.json())\n        .then(data => {\n            let findID = data.find(user => {\n                return user.username === currentUser.username\n            })\n            setCurrentUser({\n                ...currentUser,\n                id: findID.id\n            })\n        })\n\n\n        fetch('http://localhost:3000/users')\n        .then(res => res.json())\n        .then(data => {\n            if (currentUser.username===\"\" || currentUser.username===undefined){\n                alert('Please input a username')\n                setLoginValidated(false)\n            } else {\n                let foundUser = data.find(user => {\n                    if(user.username===currentUser.username){\n                        setUsernameError(false)\n                        return user.username === currentUser.username\n                    } else if (user.username !== currentUser.username) {\n                        history.push('/login')\n                        setLoginValidated(false)\n                        setUsernameError(true)\n                    } else {\n                        history.push('/login')\n                        setLoginValidated(false)\n                        setUsernameError(true)  \n                    }\n                })\n                \n                if (foundUser===\"\" || foundUser=== undefined) {\n                    alert('That user does not exist. Please create a new login.')\n                } else {\n                    if (currentUser.password === undefined || currentUser.password === \"\") {\n                        alert('Please input a password')\n                        history.push('/login')\n                        setLoginValidated(false)\n                        setPasswordError(true)\n                    } else if (currentUser.password==foundUser.password) {\n                        setLoginValidated(true)\n                        setUsernameError(false)\n                        setPasswordError(false)\n                        console.log('working')\n                        history.push('/')\n                    }      \n                }        \n            }\n        })\n    }\n\n    return (\n        <form id=\"loginForm\" className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <div className=\"login\">\n                    <div className=\"login-card\"\n                        style={usernameError=== true ? {height:'37%'} : {height:'31%'}}\n                    >\n                        <TextField\n                            error={usernameError===true ? true : false}\n                            id=\"filled-error\"\n                            label=\"username\"\n                            name=\"username\"\n                            defaultValue={currentUser.username}\n                            helperText={usernameError===true ? \"That user does not exist. Please create a new login.\" : null}\n                            variant=\"filled\"\n                            onChange={handleChange}\n                        />\n                        <TextField\n                            error={passwordError===true ? true : false}\n                            id=\"filled-error-helper-text\"\n                            label=\"password\"\n                            name=\"password\"\n                            defaultValue={currentUser.password}\n                            helperText={passwordError===true ? \"Incorrect entry. Please enter a valid password.\" : null}\n                            variant=\"outlined\"\n                            onChange={handleChange}\n                        />\n                        <div className=\"login-buttons\">\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" >Submit</Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => handleCreateLogin()}>Create Login</Button>\n                        </div>\n                    </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Login","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Home.js",["65","66"],"import { React, useState, useEffect } from 'react'\nimport Search from \"./Search\"\nimport { useHistory } from 'react-router-dom'\n\n\n\nlet Home = ({\n        currentUser, setCurrentUser, \n        selectedMap, setSelectedMap, \n        selectedChampion, setSelectedChampion, \n        selectedGameMode, setSelectedGameMode }) => {\n    const [leagueData, setLeagueData] = useState([])\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const history = useHistory()\n\n    useEffect(() => {\n        fetch(`http://localhost:3000/users/${currentUser.id}`)\n        .then(res=> res.json())\n        .then(userData => {\n            console.log(userData)\n            if(userData.champion===undefined || userData.champion===\"\"){\n                fetch('http://ddragon.leagueoflegends.com/cdn/11.12.1/data/en_US/champion.json')\n                .then(res => res.json())\n                .then(data => {\n                    setLeagueData(data.data)\n                    setSelectedChampion(Object.values(data.data)[Math.floor(Math.random() * Object.values(data.data).length)])\n                })\n            } else {\n                fetch('http://ddragon.leagueoflegends.com/cdn/11.12.1/data/en_US/champion.json')\n                .then(res => res.json())\n                .then(data => {\n                    setLeagueData(data.data)\n                    let foundChampion = Object.values(data.data).find(champion => {\n                        console.log(champion.name)\n                        console.log(userData.champion)\n                        return champion.name === userData.champion\n                    })\n                    console.log(foundChampion)\n                    setSelectedChampion(foundChampion)\n                })\n            }\n        })\n    },[setSelectedChampion])\n   \n    let handleSelectChampion = (champion) => {\n\n        fetch(`http://localhost:3000/users/${currentUser.id}`, {\n            method: 'PATCH', \n            headers: {'Content-type':'application/json'}, \n            body: JSON.stringify({\n                username: currentUser.username,\n                password: currentUser.password,\n                \"champion\": champion.name\n            })\n        })\n        .then(res => res.json())\n        .then(data => setSelectedChampion(champion))\n\n    }\n\n    //Select a filtered list of champs when entering a search\n    const champsToDisplay = Object.values(leagueData).filter((champ) =>\n      champ.name.toLowerCase().includes(searchTerm.toLowerCase())\n      ); \n\n    \n    let handleSelectGameMode = () => {\n        history.push('/selectgamemode')\n    }\n\n\n    let handleBuild = () => {     \n        history.push('/play/'+selectedChampion.name)\n\n    let handlePlay = () => {\n        history.push('/battle')\n\n    }\n\n    return (\n        <div className='main-container'>\n            <div className=\"game-setup-container\">\n                <div><b>Map:</b> {selectedMap}</div>\n                <div><b>Champion:</b> {selectedChampion.name} {selectedChampion.title}</div>\n                <div><b>Game Mode:</b> {selectedGameMode}</div>\n            </div>\n\n            <div className='action-container'>\n                <div className='champion-viewer-container' style={{backgroundImage: `url(\n                    http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${selectedChampion.name}_0.jpg)`}}\n                >\n                    <h3 className=\"selected-champion-info\">{selectedChampion.name} {selectedChampion.title}</h3>\n                    <div className=\"champion-description\">{selectedChampion.blurb}</div>\n                </div>\n                <div className='play-container'>\n                    <div className=\"select-game\">\n                        <button className=\"select-game-button\" onClick={() => handleSelectGameMode()}>\n                            <em>Select Game Mode</em>\n                        </button>\n                    </div>\n                    <div className=\"play-card\">\n\n                        <button className=\"build-button\"onClick={() => handleBuild()}><em>Make a Build</em></button>\n\n                        <button className=\"play-button\" onClick={() => handlePlay()}>Play</button>\n\n                    </div>\n\n                </div>\n                <div className='new-builds-container'>\n                    <b>Select your Champion</b>\n                    <Search leagueData searchTerm={searchTerm} onChangeSearch={setSearchTerm}/>\n                    {Object.values(champsToDisplay).map(champion => {\n                    return (\n                        <div className=\"champion-container\" key={champion.id} onClick={() => handleSelectChampion(champion)}>\n                            <h3 className='champion-name'>{champion.name}</h3>\n                            <img \n                                className='champion-image' \n                                src={`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/champion/${champion.image.full}`} \n                                alt=\"broken\"/>\n                        </div>\n                    )\n                    })}\n                </div>\n            </div>\n            <div className=\"user-information\">\n                <b>Current User: {currentUser.username} </b>\n                <button className=\"logout-button\" onClick={() => {\n                    history.push('/login')\n                    setCurrentUser({\n                        username: \"\",\n                        password: \"\"\n                    })\n                    }}>Logout</button>\n            </div>\n        </div>\n    )\n}\n        }\n\nexport default Home","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Search.js",["67","68"],"\nimport React,{useState} from \"react\";\nimport FormControl from '@material-ui/core/FormControl';\n\nfunction Search({searchTerm, onChangeSearch}) {\n \n  function handleChange(event) {\n    onChangeSearch(event.target.value);\n    console.log(event.target.value)\n  }\n\n \n  return (\n    <div className=\"ui search\">\n      <div className=\"ui icon input\">\n        <input className=\"prompt\" placeholder={\" Search\"} value={searchTerm} onChange={handleChange}  />\n        <i className=\"search icon\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Search;","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Play.js",["69","70","71","72","73","74","75","76","77","78"],"import { React, useState, useEffect } from 'react'\nimport {useParams, useHistory} from \"react-router-dom\"\nimport Search from './Search'\nimport Item from './Item'\nlet Play = ({currentUser,setCurrentUser,selectedChampion,setSelectedChampion}) => {\n    const [itemData, setItemData] = useState([])\n    const [selectedItems, setSelectedItems] = useState([null,null,null,null,null,null])\n    const [championData, setChampionData] = useState([])\n    const history = useHistory()\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const tempStat=[]\n\n    const [hasItem2, setHasItem2]=useState([false,false,false,false,false,false])\n    const [champStat, setChampStat] = useState({\n        hp:'',\n        hpperlevel:'',\n        mp:'',\n        mpperlevel:'',\n        movespeed:''  ,\n        armor:'',armorperlevel:'',spellblock:'',\n        spellblockperlevel:'',attackrange:'',hpregen:'',\n        hpregenperlevel:'',mpregen:'',mpregenperlevel:'',\n        crit:'',critperlevel:'',attackdamage:'',\n        attackdamageperlevel:'',attackspeedperlevel:'',attackspeed:''\n        \n});\n     let statList=['hp','hpperlevel','mp','mpperlevel','movespeed','armor','armorperlevel','spellblock','spellblockperlevel','attackrange','hpregen','hpregenperlevel','mpregen','mpregenperlevel','crit','critperlevel','attackdamage','attackdamageperlevel','attackspeedperlevel','attackspeed']\n    useEffect(() => {\n        fetch('http://ddragon.leagueoflegends.com/cdn/11.12.1/data/en_US/item.json')\n        .then(res => res.json())\n        .then(data => {\n            setItemData(data.data)\n        })\n    },[])\n    const iCanHas=(item)=>{\n            let testCase=hasItem2.filter((checking)=>checking===false)\n               if(testCase.length>0){\n                let result= (hasItem2.indexOf(false))\n                hasItem2[result]=true\n                selectedItems[result]=(item)\n                console.log(selectedItems)\n            }\n            else{alert('You already have enough many items!')}\n       \n    } \n    const handleSelectedItem=(item)=>{\n        //console.log(\"you selected\"+item.name)\n        iCanHas(item)\n        console.log(hasItem2)\n     }\n     //Select a filtered list of champs when entering a search\n    const itemsToDisplay = Object.values(itemData).filter((item) =>\n        item.name.toLowerCase().includes(searchTerm.toLowerCase())\n     ); \n    const displayStats=()=>{\n        let number=-1\n        Object.values(selectedChampion.stats).map(status=>{\n           tempStat.push(status)\n           \n        })\n\n\n\n        return  <div>\n                    <div>{selectedChampion.name} Stats</div>\n                    {Object.keys(selectedChampion.stats).map(element => {\n                            number=number+1\n                            //console.log(element)\n                          return  (<div className='stat-list'>{element+\" \"+tempStat[number]}</div>)\n                   \n                        \n                     })}\n                </div> \n     }\n\n    const removeItem=(space)=>{\n        selectedItems[space]=null\n        hasItem2[space]=false\n    }\n \n    return (\n        <div className='main-container'>\n            <div className=\"game-setup-container\">\n                <div><b>Map:</b> {}</div>\n                <div><b>Champion:</b> {selectedChampion.name} {selectedChampion.title}</div>\n                <div><b>Game Mode:</b> </div>\n            </div>\n \n            <div className='action-container'>\n                <div className='champion-viewer-container'\n                    style={{backgroundImage: `url(\n                    http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${selectedChampion.name}_0.jpg)`}}\n                >\n                    <h3 className=\"selected-champion-info\">{selectedChampion.name} {selectedChampion.title}</h3>\n                    <div className=\"champion-description\">{displayStats()}</div>\n                </div>\n                <div className='play-container'>\n                    <div className=\"select-game\">\n                    \n                        <div id='item1'className=\"item-selector\" onClick={removeItem(0)}>\n                            <img className='champion-image' src={hasItem2[0] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[0].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        <div id='item2'className=\"item-selector\" onClick={removeItem(1)}>\n                            <img className='champion-image' src={hasItem2[1] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[1].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        <div id='item3'className=\"item-selector\" onClick={removeItem(2)}>\n                            <img className='champion-image' src={hasItem2[2] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[2].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        <div id='item4'className=\"item-selector\" onClick={removeItem(3)}>\n                            <img className='champion-image' src={hasItem2[3] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[3].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        <div id='item5'className=\"item-selector\" onClick={removeItem(4)}>\n                            <img className='champion-image' src={hasItem2[4] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[4].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        <div id='item6'className=\"item-selector\" onClick={removeItem(5)}>\n                            <img className='champion-image' src={hasItem2[5] ?`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${selectedItems[5].image.full}`:\"\"} alt=\"Pick an Item\"/>\n                        </div>\n                        \n                    </div>\n                 \n \n                </div>\n                <div className='new-builds-container'>\n                    <b>Select your Item</b>\n                    <Search  searchTerm={searchTerm} onChangeSearch={setSearchTerm}/>\n                    {Object.values(itemsToDisplay).map(item => {\n                    return (\n                        <div className=\"champion-container\" key={item.id} onClick={() => handleSelectedItem(item)}>\n                            <h3 className='champion-name'>{item.name}</h3>\n                            <img className='champion-image' src={`http://ddragon.leagueoflegends.com/cdn/11.12.1/img/item/${item.image.full}`} alt=\"broken\"/>\n                        </div>\n                    )\n                    })}\n                </div>\n            </div>\n            <div className=\"return-home\" >\n                <button className =\"back-button\" onClick={()=>history.push('/')}>Home</button>\n            </div>\n            <div className=\"user-information\">\n                <b>Current User: {currentUser.username} </b>\n                <button className=\"logout-button\" onClick={() => {\n                    history.push('/login')\n                    setCurrentUser({\n                        username: \"\",\n                        password: \"\"\n                    })\n                    }}>Logout</button>\n            </div>\n        </div>)\n}\n \nexport default Play\n\n","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/SelectGameMode.js",[],"/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Battle.js",["79","80","81"],"import { useHistory } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\n\nlet Battle = ({ currentUser, setCurrentUser, selectedMap, selectedChampion, selectedGameMode }) => {\n    const history = useHistory();\n    const [opponentChampion, setOpponent] = useState(\"\")\n    const [healthState, setHealthState] = useState(100)\n    const [magicState, setMagicState] = useState(40)\n    const [attackState, setAttackState] = useState(30)\n    const [defendState, setDefendState] = useState(10)\n    const [defenseModeOn, setDefenseModeOn] = useState(false)\n    const [healthStateOpp, setHealthStateOpp] = useState(75)\n    const [magicStateOpp, setMagicStateOpp] = useState(50)\n    const [attackStateOpp, setAttackStateOpp] = useState(30)\n    const [defendStateOpp, setDefendStateOpp] = useState(7)\n    const [defenseModeOnOpp, setDefenseModeOnOpp] = useState(false)\n\n\n    useEffect(() => {\n        fetch('http://ddragon.leagueoflegends.com/cdn/11.12.1/data/en_US/champion.json')\n        .then(res => res.json())\n        .then(data => {\n            setOpponent(Object.values(data.data)[Math.floor(Math.random() * Object.values(data.data).length)])\n        })\n    },[])\n\n\n    let handleAttack = (e) => {\n        if((healthStateOpp-attackState)<0) {\n            setHealthStateOpp(healthStateOpp-(healthStateOpp-0))\n            alert('You won the battle. Returning to the Home Screen to start your next battle')\n            history.push('/')\n        } else if (defenseModeOnOpp===true) {\n            if(defendStateOpp>=attackState) {\n                alert(`Your opponent's defense completely blunted your attack. Luckily their armor needs to recharge`)\n                setHealthStateOpp(healthStateOpp-attackState+defendStateOpp)\n                setMagicState(magicState-(attackState/2))\n                setDefendStateOpp(defendStateOpp/2)\n                setDefenseModeOnOpp(true)\n                randomMove()\n            } else {\n                alert(`Your opponent's defense blunted your attack. You attacked for ${attackState-defendStateOpp} damage!`)\n                setHealthStateOpp(healthStateOpp-attackState+defendStateOpp)\n                setMagicState(magicState-(attackState/2))\n                setDefendStateOpp(defendStateOpp/2)\n                setDefenseModeOnOpp(false)\n                randomMove()\n            }\n        } else {\n            alert(`You attacked for ${attackState-defendStateOpp} damage!`)\n            setHealthStateOpp(healthStateOpp-attackState+defendStateOpp)\n            setMagicState(magicState-(attackState/2))\n            randomMove()\n        }\n    }\n \n    let handleDefend = (e) => {\n        if((healthState-attackStateOpp+(defendState*2))<0){\n            alert('You lost the battle. Returning to the Home Screen to start your next battle')\n            history.push('/')\n        } else {\n            alert(`You increased your defense by 2x until your opponent's next attack. Your defense is now ${defendState*2}!`)\n            setDefendState(defendState*2)\n            setDefenseModeOn(true)\n            randomMove()\n        }\n\n    }\n\n    let handleUseItem = (e) => {\n        console.log(e.target.parentElement.parentElement)\n    }\n\n    let handleFlee = (e) => {\n        alert('You fled the battle. Returning to the Home Screen to select a champion!')\n        history.push('/')\n    }\n\n    let oppMoveArray = [\"handleAttack\", \"handleDefend\"]\n\n    let randomMove = () => {\n        let randomOppMove = oppMoveArray[Math.floor(Math.random()*oppMoveArray.length)]\n        console.log(randomOppMove)\n        switch(randomOppMove) {\n            case \"handleAttack\":\n                console.log('opp attack')\n                if(healthState-attackStateOpp<0) {\n                    alert('You lost the battle. Returning to the home page to start your next battle!')\n                    history.push('/')\n                } else if (defenseModeOn===true) {\n                    if(defendState>attackStateOpp) {\n                        alert('Your defense completely stopped their attack! Unfortunately, your armor needs to be fixed and your defense has been cut in half!')\n                        setMagicStateOpp(magicStateOpp-(attackStateOpp/2))\n                        setDefendState(defendState/2)\n                        setDefenseModeOn(false)\n                    } else if (defendState>attackStateOpp){\n                        alert('Your defense completely stopped their attack! Unfortunately, your armor needs to be fixed and your defense has been cut in half!')\n                        setMagicStateOpp(magicStateOpp-(attackStateOpp/2))\n                        setDefendState(defendState/2)\n                        setDefenseModeOn(false)\n                    } else {\n                        alert(`Your defense worked! You reduced the damage of your opponent's attack! Your opponent attacked for ${attackStateOpp-defendState} damage!`)\n                        setHealthState(healthState-attackStateOpp+defendState)\n                        console.log(healthState)\n                        setMagicStateOpp(magicStateOpp-(attackStateOpp/2))\n                        setDefendState(defendState/2)\n                        setDefenseModeOn(false)\n                    }\n                } else {\n                    alert(`Your opponent attacked for ${attackStateOpp-defendState} damage!`)\n                    setHealthState(healthState-attackStateOpp+defendState)\n                    console.log(healthState)\n                    setMagicStateOpp(magicStateOpp-(attackStateOpp/2))\n                }\n                break;\n            case \"handleDefend\":\n                if((healthStateOpp-attackState+(defendStateOpp*2))<0){\n                    alert('You won the battle! Returning to the Home Screen to start your next battle')\n                    history.push('/')\n                } else {\n                    setDefendStateOpp(defendStateOpp*2)\n                    alert(`Your opponent increased their defense by 2x until your next attack!`)\n                    setDefenseModeOnOpp(true)\n                }\n                break;\n        }\n    }\n\n    return (\n        <div className=\"main-container\" id={selectedChampion.name}>\n            <div className=\"game-setup-container\">\n                <div><b>Map:</b> {selectedMap}</div>\n                <div><b>Champion:</b> {selectedChampion.name} {selectedChampion.title}</div>\n                <div><b>Game Mode:</b> {selectedGameMode}</div>\n            </div>\n            <div className=\"action-container\">\n                <div className=\"player-container\">\n                    <b>Name: {selectedChampion.name}</b>\n                    <div \n                        className=\"champion-battle-image\"\n                        style={{backgroundImage: `url(http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${selectedChampion.name}_0.jpg)`}}>\n                    </div>\n                    <div className=\"items-stats-container\">\n                        <div className=\"stats\">\n                            <div className=\"health-stats\">\n                                <h5>HP: {healthState}</h5>\n                                <h5>MP: {magicState}</h5>\n                            </div>\n                            <div className=\"fight-stats\">\n                                <h5>ATK: {attackState}</h5>\n                                <h5>DEF: {defendState}</h5>\n                            </div>\n                        </div>\n                        <div className=\"items\"></div>\n                    </div>\n                    <div className=\"movelist\">\n                        <button className=\"move-button\" onClick={(e) => handleAttack(e)}>Attack</button>\n                        <button className=\"move-button\" onClick={(e) => handleDefend(e)}>Defend</button>\n                        <button className=\"move-button\" onClick={(e) => handleUseItem(e)}>Use Item</button>\n                        <button className=\"move-button\" onClick={(e) => handleFlee(e)}>Flee</button>\n                    </div>\n                </div>\n                <div className=\"versus-container\">\n                    <h2 className=\"versus\">VS</h2>\n                </div>\n                <div className=\"player-container\">\n                    <b>Name: {opponentChampion.name} </b> \n                    <div \n                        className=\"champion-battle-image\" \n                        style={{backgroundImage: `url(http://ddragon.leagueoflegends.com/cdn/img/champion/loading/${opponentChampion.name}_0.jpg)`}}\n                        >\n\n                    </div>\n                    <div className=\"items-stats-container\">\n                        <div className=\"stats\">\n                            <div className=\"health-stats\">\n                                <h5>HP: {healthStateOpp}</h5>\n                                <h5>MP: {magicStateOpp}</h5>\n                            </div>\n                            <div className=\"fight-stats\">\n                                <h5>ATK: {attackStateOpp}</h5>\n                                <h5>DEF: {defendStateOpp}</h5>\n                            </div>\n                        </div>\n                        <div className=\"items\"></div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"user-information\">\n                <b>Current User: {currentUser.username} </b>\n                <button className=\"go-back\" onClick={() => { history.push('/')}}>Go back</button>\n                <button \n                    className=\"logout-button\" \n                    onClick={() => {\n                    history.push('/login')\n                    setCurrentUser({\n                        username: \"\",\n                        password: \"\"\n                    })\n                    }}\n                >Logout</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Battle","/home/bourq/Development/code/phase2/project/lolbuilderpro/src/Item.js",["82","83","84","85","86","87"],"import { React, useState, useEffect } from 'react'\nimport {useParams, useHistory} from \"react-router-dom\"\nlet Item = ({}) => {\n    \n    \n}\nexport default Item",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":14},{"ruleId":"92","severity":1,"message":"96","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":56,"column":48,"nodeType":"99","messageId":"100","endLine":56,"endColumn":50},{"ruleId":"101","severity":1,"message":"102","line":79,"column":52,"nodeType":"103","messageId":"104","endLine":79,"endColumn":54},{"ruleId":"105","severity":1,"message":"106","line":44,"column":7,"nodeType":"107","endLine":44,"endColumn":28,"suggestions":"108"},{"ruleId":"92","severity":1,"message":"109","line":73,"column":9,"nodeType":"94","messageId":"95","endLine":73,"endColumn":20},{"ruleId":"92","severity":1,"message":"110","line":2,"column":15,"nodeType":"94","messageId":"95","endLine":2,"endColumn":23},{"ruleId":"92","severity":1,"message":"111","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":19},{"ruleId":"92","severity":1,"message":"112","line":2,"column":9,"nodeType":"94","messageId":"95","endLine":2,"endColumn":18},{"ruleId":"92","severity":1,"message":"113","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":12},{"ruleId":"92","severity":1,"message":"114","line":7,"column":27,"nodeType":"94","messageId":"95","endLine":7,"endColumn":43},{"ruleId":"92","severity":1,"message":"115","line":8,"column":12,"nodeType":"94","messageId":"95","endLine":8,"endColumn":24},{"ruleId":"92","severity":1,"message":"116","line":8,"column":26,"nodeType":"94","messageId":"95","endLine":8,"endColumn":41},{"ruleId":"92","severity":1,"message":"117","line":13,"column":22,"nodeType":"94","messageId":"95","endLine":13,"endColumn":33},{"ruleId":"92","severity":1,"message":"118","line":14,"column":12,"nodeType":"94","messageId":"95","endLine":14,"endColumn":21},{"ruleId":"92","severity":1,"message":"119","line":14,"column":23,"nodeType":"94","messageId":"95","endLine":14,"endColumn":35},{"ruleId":"92","severity":1,"message":"120","line":27,"column":10,"nodeType":"94","messageId":"95","endLine":27,"endColumn":18},{"ruleId":"97","severity":1,"message":"121","line":57,"column":57,"nodeType":"99","messageId":"122","endLine":57,"endColumn":59},{"ruleId":"92","severity":1,"message":"123","line":9,"column":25,"nodeType":"94","messageId":"95","endLine":9,"endColumn":39},{"ruleId":"92","severity":1,"message":"124","line":14,"column":28,"nodeType":"94","messageId":"95","endLine":14,"endColumn":45},{"ruleId":"125","severity":1,"message":"126","line":84,"column":9,"nodeType":"127","messageId":"128","endLine":126,"endColumn":10},{"ruleId":"92","severity":1,"message":"129","line":1,"column":10,"nodeType":"94","messageId":"95","endLine":1,"endColumn":15},{"ruleId":"92","severity":1,"message":"110","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"130","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"112","line":2,"column":9,"nodeType":"94","messageId":"95","endLine":2,"endColumn":18},{"ruleId":"92","severity":1,"message":"131","line":2,"column":20,"nodeType":"94","messageId":"95","endLine":2,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":3,"column":13,"nodeType":"134","messageId":"104","endLine":3,"endColumn":15},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'NavBar' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.id'. Either include it or remove the dependency array.","ArrayExpression",["137"],"'handleBuild' is assigned a value but never used.","'useState' is defined but never used.","'FormControl' is defined but never used.","'useParams' is defined but never used.","'Item' is defined but never used.","'setSelectedItems' is assigned a value but never used.","'championData' is assigned a value but never used.","'setChampionData' is assigned a value but never used.","'setHasItem2' is assigned a value but never used.","'champStat' is assigned a value but never used.","'setChampStat' is assigned a value but never used.","'statList' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'setAttackState' is assigned a value but never used.","'setAttackStateOpp' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'React' is defined but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Update the dependencies array to be: [currentUser.id, setSelectedChampion]",{"range":"140","text":"141"},[1745,1766],"[currentUser.id, setSelectedChampion]"]